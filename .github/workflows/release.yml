name: Windows Release with SLSA3, Checksums, and GPG Signing

on:
  release:
    types: [published]

jobs:
  build:
    name: Build Windows Binary
    runs-on: windows-latest
    permissions:
      id-token: write
      contents: write
    outputs:
      subjects: ${{ steps.hash.outputs.subjects }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build binary
        run: |
          pyinstaller --onefile main.py
          mkdir dist-out
          Copy-Item dist\main.exe dist-out\dither.exe

      - name: Generate SHA256 subjects
        id: hash
        shell: bash
        run: |
          cd dist-out
          DIGEST=$(sha256sum dither.exe | cut -d ' ' -f1)
          SUBJECTS=$(jq -nc --arg name "dither.exe" --arg digest "$DIGEST" '[{"name": $name, "digest": {"sha256": $digest}}]' | base64 -w0)
          echo "subjects=$SUBJECTS" >> $GITHUB_OUTPUT

      - name: Generate SHA256 checksum file
        shell: bash
        run: |
          cd dist-out
          sha256sum dither.exe > dither.exe.sha256

      - name: Import GPG key
        shell: bash
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpgconf --kill gpg-agent

      - name: Sign checksum with GPG
        shell: bash
        run: |
          cd dist-out
          gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
            --armor --output dither.exe.sha256.asc --detach-sign dither.exe.sha256

      - name: Upload artifacts to release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist-out/dither.exe
            dist-out/dither.exe.sha256
            dist-out/dither.exe.sha256.asc

  provenance:
    name: Generate SLSA3 Provenance
    needs: build
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.4.0
    with:
      base64-subjects: "${{ needs.build.outputs.subjects }}"
      upload-assets: true
